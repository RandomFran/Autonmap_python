#!/usr/bin/env python3

import subprocess
import sys
import re
import xml.etree.ElementTree as ET
from datetime import datetime

# Función para verificar si una IP es válida
def validar_ip(ip):
    patron_ip = re.compile(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')
    return bool(patron_ip.match(ip))

# Verificar si se proporcionó una IP como argumento
if len(sys.argv) != 2:
    print("Uso: {} <IP>".format(sys.argv[0]))
    sys.exit(1)

# Asignar la IP proporcionada a una variable
ip = sys.argv[1]

# Verificar si la IP es válida
if not validar_ip(ip):
    print("Error: La IP proporcionada no es válida.")
    sys.exit(1)

# Verificar si nmap está instalado
try:
    subprocess.run(["nmap", "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
except FileNotFoundError:
    print("Error: nmap no está instalado. Por favor, instálalo antes de ejecutar este script.")
    sys.exit(1)

# Verificar si la IP es alcanzable
try:
    subprocess.run(["ping", "-c", "1", "-W", "1", ip], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
except subprocess.CalledProcessError:
    print(f"Error: La IP {ip} no es alcanzable.")
    sys.exit(1)

# Crear un nombre base para los archivos de salida
output_base = f"escaneo_{ip}"

# Ejecutar nmap con las opciones -sC, -sV, -p-, sin mostrar la salida en la terminal
print(f"Escaneando la IP {ip} con nmap...")
try:
    with open(f"{output_base}.nmap", "w") as f:
        subprocess.run(
            ["nmap", "-sC", "-sV", "-p-", "-oA", output_base, ip],
            stdout=f,  # Redirigir la salida estándar al archivo .nmap
            stderr=subprocess.DEVNULL,  # Redirigir la salida de error a /dev/null
            check=True
        )
    print("Escaneo completado. Resultados guardados en:")
    print(f"- {output_base}.nmap (formato de texto)")
    print(f"- {output_base}.xml (formato XML)")
    print(f"- {output_base}.gnmap (formato grepable)")
except subprocess.CalledProcessError:
    print("Error: El escaneo de nmap falló.")
    sys.exit(1)
except Exception as e:
    print(f"Error inesperado: {e}")
    sys.exit(1)

# Función para generar un informe resumido
def generar_informe(output_base):
    informe_file = f"{output_base}_informe.txt"
    xml_file = f"{output_base}.xml"

    print("Generando informe resumido...")
    with open(informe_file, "w") as f:
        f.write(f"Informe de escaneo para la IP {ip}\n")
        f.write(f"Fecha: {datetime.now()}\n")
        f.write("====================================\n")

        # Parsear el archivo XML
        try:
            tree = ET.parse(xml_file)
            root = tree.getroot()

            # Extraer puertos abiertos y servicios
            f.write("Puertos abiertos y servicios detectados:\n")
            for port in root.findall(".//port"):
                port_id = port.get("portid")
                service = port.find("service")
                if service is not None:
                    service_name = service.get("name")
                    service_product = service.get("product", "")
                    service_version = service.get("version", "")
                    f.write(f"Puerto {port_id}/tcp: {service_name} {service_product} {service_version}\n")
        except Exception as e:
            f.write(f"Error al generar el informe: {e}\n")

    print(f"Informe generado en: {informe_file}")

# Llamar a la función para generar el informe
generar_informe(output_base)